//1. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä User –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
//a. userName - –∏–º—è, —Å—Ç—Ä–æ–∫–∞
//b. age - –≤–æ–∑—Ä–∞—Å—Ç, —á–∏—Å–ª–æ
//c. numbersOfPost - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤, —á–∏—Å–ª–æ
//d. –∫–ª–∞—Å—Å –æ–∂–∏–¥–∞–µ—Ç 1 –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏

//–î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ getInfo(), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:
//`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${} ${} –ª–µ—Ç –∏ —É –Ω–µ–≥–æ ${} –ø—É–±–ª–∏–∫–∞—Ü–∏–π.`

const User = function (userObj) {
  const { userName, age, numbersOfPost } = userObj;
  console.log("üê±‚Äçüë§üëÄ: User -> typeof this", typeof this);
  this.username = userName;
  this.age = age;
  this.numbersOfPost = numbersOfPost;

  // this.getInfo = function () {
  // console.log(
  //   `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${this.username} ${this.age} –ª–µ—Ç –∏ —É –Ω–µ–≥–æ ${this.numbersOfPost} –ø—É–±–ª–∏–∫–∞—Ü–∏–π.`
  // );
  // };
};
User.prototype.getInfo = function () {
  console.log(
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${this.username} ${this.age} –ª–µ—Ç –∏ —É –Ω–µ–≥–æ ${this.numbersOfPost} –ø—É–±–ª–∏–∫–∞—Ü–∏–π.`
  );
};
const polly = new User({ userName: "Polly", age: 30, numbersOfPost: 15 });
// console.log(polly);
// polly.getInfo();

//2. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Storage –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–∫—Ç—ã
//–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤.
//–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω –∞–≥—Ä—É–º–µ–Ω—Ç - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤,
//–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ–π—Å—Ç–≤–æ items.
//–î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:
//getItems() - –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
//addItems(item) - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Ç–µ–∫—É—â–∏–º
//removeItem(item) - –ø–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö

const Storage = function (itemsArray) {
  this.items = itemsArray;
};

Storage.prototype.getItem = function () {
  return this.items;
};

Storage.prototype.addItems = function (item) {
  return this.items.push(item);
};

Storage.prototype.removeItem = function (item) {
  const index = this.items.indexOf(item);
  if (index !== -1) this.items.splice(index, 1);
  return this.items;
};

const storage = new Storage(["apple", "banana", "mango"]);
// console.log(storage);
// console.log(storage.removeItem("apple"));

//3. –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Client –∫–æ—Ç—Ä–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç
//—Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ login email
//–û–±—ä—è–≤–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ #login #email,
//–¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Å–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä login email

class Client {
  #login;
  #email;

  constructor(login, email) {
    this.#login = login;
    this.#email = email;
  }

  get getClientData() {
    return {
      login: this.#login,
      email: this.#email,
    };
  }

  set changeEmail(newEmail) {
    this.#email = newEmail;
  }
}
const client = new Client("mango", "mango@gmail.com");
client.changeEmail = '"mango@gmail.com"';
// console.log(client.getClientData.email);

//4. –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Notes –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∑–∞–º–µ—Ç–æ–∫ –≤
//—Å–≤–æ–π—Å—Ç–≤–µ items.
//–ó–∞–º–µ—Ç–∫–∞ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ text priority
//–î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ Priority,
//–≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
//–î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã addNote(note), removeNote(text)
//updatePriority(text, newPriority)

class Notes {
  static Priority() {
    return {
      HIGHT: "hight",
      LOW: "low",
    };
  }

  constructor() {
    this.items = [];
  }

  addNote(note) {
    return this.items.push(note);
  }

  removeNote(noteName) {
    const index = this.items.findIndex((item) => item.text === noteName);
    if (index !== -1) {
      this.items.splice(index, 1);
    }
    // return this.items;
  }
  updatePriority({ text, newPriority }) {
    const index = this.items.findIndex((item) => item.text === text);
    if (index !== -1) {
      this.items[index].priority = newPriority;
    }
  }
}

const note1 = new Notes();

// note1.addNote({ text: "Note1", priority: Notes.Priority().LOW });
// note1.addNote({ text: "Note2", priority: Notes.Priority().LOW });
// note1.updatePriority({ text: "Note2", newPriority: Notes.Priority().HIGHT });
// console.table(note1.items);

//5. –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å Worker —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ name, age, salary.
//–£ –∫–ª–∞—Å—Å–∞ Worker –µ—Å—Ç—å –º–µ—Ç–æ–¥ getSalary.
//–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å TopLevelWorker —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ hierarchyLevel
//–∏ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∫–ª–∞—Å—Å Worker, –¥–æ–±–∞–≤–ª—è—è –º–µ—Ç–æ–¥ getHierarchyLevel
//–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é ES5 –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –∏ ES6 –∫–ª–∞—Å—Å–æ–≤

const HIERARCHY_LEVEL = {
  TOP: "top",
  BOTTOM: "bottom",
};

const workerObj = {
  name: "Mango",
  surname: "Worker",
  age: 30,
  position: "FE developer",
  salary: 5000,
};

//ES5

const Worker = function (obj = {}) {
  const { name = "name", surname, age = 1, position, salary } = obj;
  this.name = name;
  this.surname = surname;
  this.age = age;
  this.position = position;
  this.salary = salary;
};

Worker.prototype.getSalary = function () {
  return this.salary;
};

const TopLevelWorker = function (obj, hierarchyLevel) {
  Worker.call(this, obj); //—É–Ω–∞—Å–ª–µ–¥—É–µ–º Worker
  this.hierarchyLevel = hierarchyLevel;
};

// TopLevelWorker.prototype = Object.create(Worker.prototype);
//TopLevelWorker.prototype.constructor = TopLevelWorker;
const top = new TopLevelWorker(workerObj, HIERARCHY_LEVEL.BOTTOM);
// console.log(top.__proto__ === TopLevelWorker.prototype);
// console.log(TopLevelWorker.prototype.__proto__ === Worker.prototype);
// console.log(TopLevelWorker.prototype.__proto__ === Object.prototype);
// console.log(TopLevelWorker.__proto__ === Function.prototype);
// console.log(Worker.__proto__ === Function.prototype);
// console.log(Worker.prototype.__proto__ === Object.prototype);
//console.log(top.__proto__.__proto__.__proto__ === Object.prototype);
// top.getSalary();
//ES6

class WorkerES6 {
  constructor(obj = {}) {
    const { name = "name", surname, age = 1, position, salary } = obj;
    this.name = name;
    this.surname = surname;
    this.age = age;
    this.position = position;
    this.salary = salary;
  }

  getSalary() {
    return this.salary;
  }
}

class TopLevelWorkerES6 extends WorkerES6 {
  constructor(obj, hierarchyLevel) {
    super(obj);
    this.hierarchyLevel = hierarchyLevel;
  }
}

const topES6 = new TopLevelWorkerES6(workerObj, HIERARCHY_LEVEL.TOP);
// console.log(TopLevelWorkerES6.prototype.__proto__ === ???);
// console.log(TopLevelWorkerES6.__proto__ === ???);
// console.log(topES6.__proto__ === ???);
// console.log(topES6.getSalary());



//Sasha
/**
 * –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥ `calcTotalPrice(stoneName)`, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–Ω—è –∏
 * —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–º–Ω–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, —Ü–µ–Ω–æ–π –∏
 * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ `stones`.
 */

const chopShop = {
  stones: [
    { name: 'Emerald', price: 1300, quantity: 4 },
    { name: 'Diamond', price: 2700, quantity: 3 },
    { name: 'Sapphire', price: 1400, quantity: 7 },
    { name: 'Ruby', price: 800, quantity: 2 },
  ],
  calcTotalPrice(stoneName) {
    const stone = this.stones.find(({ name }) => name === stoneName);
    if (stone) {
      return stone.price * stone.quantity;
    }
    alert('–¢–∞–∫–æ–≥–æ –∫–∞–º–Ω—è –Ω–µ—Ç, –∏–∑–≤–∏–Ω–∏—Ç–µ');
  },
};

console.log(chopShop.calcTotalPrice('Emerald')); // 5200
console.log(chopShop.calcTotalPrice('Diamond')); // 8100
console.log(chopShop.calcTotalPrice('Sapphire')); // 9800
console.log(chopShop.calcTotalPrice('Ruby')); // 1600


//TODO:======================
const phonebook = {
  contacts: [],
  add(data) {
    const newContact = {
      list: 'default',
      ...data,
      id: this.generateId(),
      createdAt: this.getDate(),
    };
    this.contacts.push(newContact);
  },
  list() {
    console.table(this.contacts);
  },
  generateId() {
    return '_' + Math.random().toString(36).substr(2, 9);
  },
  getDate() {
    return Date.now();
  },
};

phonebook.add({
  name: 'Mango',
  email: 'mango@mail.com',
  list: 'friends',
});
phonebook.list();

phonebook.add({
  name: 'Poly',
  email: 'poly@hotmail.com',
});
phonebook.list();

//TODO:=====================
/**
 * –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç `calculator` —Å —Ç—Ä–µ–º—è –º–µ—Ç–æ–¥–∞–º–∏:
 * - `read(a, b)`- –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞.
 * - `add()` - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
 * - `mult()` - –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */

const calculator = {
  x: 0,
  y: 0,
  read(a, b) {
    this.x = a;
    this.y = b;
  },
  add() {
    return this.x + this.y;
  },
  mult() {
    return this.x * this.y;
  },
};

calculator.read(5, 10);
console.log(calculator.add());
console.log(calculator.mult());

calculator.read(15, 20);
console.log(calculator.add());
console.log(calculator.mult());
//TODO:=============================================
//–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä User –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏
//a. userName - —ñ–º'—è, —Ä—è–¥–æ–∫
//b. age - –≤—ñ–∫, —á–∏—Å–ª–æ
//c. numbersOfPost - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
//d. –∫–ª–∞—Å –æ—á—ñ–∫—É—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏

//–î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫:
//`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ ${} ${} —Ä–æ–∫—ñ–≤ —ñ –≤ –Ω—å–æ–≥–æ ${} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π.`

const User = function (userObj) {
  const { userName, age, numbersOfPost } = userObj;
  console.log("üê±‚Äçüë§üëÄ: User -> typeof this", typeof this);
  this.username = userName;
  this.age = age;
  this.numbersOfPost = numbersOfPost;

  // this.getInfo = function () {
  // console.log(
  // `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ ${this.username} ${this.age} —Ä–æ–∫—ñ–≤ —ñ –≤ –Ω—å–æ–≥–æ ${this.numbersOfPost} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π.`
  //);
  //};
};
User.prototype.getInfo = function () {
  console.log(
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${this.username} ${this.age} –ª–µ—Ç –∏ —É –Ω–µ–≥–æ ${this.numbersOfPost} –ø—É–±–ª–∏–∫–∞—Ü–∏–π.`
  );
};
const polly = new User({ userName: "Polly", age: 30, numbersOfPost: 15 });
// console.log(polly);
// polly.getInfo();

//TODO:=============================================
//–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏
//–î–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤.
//–ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞–≥—Ä—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤,
//—ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —ó—Ö —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.
//–î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
//getItems() - –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤
//addItems(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö
//removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö

const Storage = function (itemsArray) {
  this.items = itemsArray;
};

Storage.prototype.getItem = function () {
  return this.items;
};

Storage.prototype.addItems = function (item) {
  return this.items.push(item);
};

Storage.prototype.removeItem = function (item) {
  const index = this.items.indexOf(item);
  if (index !== -1) this.items.splice(index, 1);
  return this.items;
};

const storage = new Storage(["apple", "banana", "mango"]);
// console.log(storage);
// console.log(storage.removeItem("apple"));

//TODO:=============================================
//–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Client —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç
//–∑ ‚Äã‚Äã–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login email
//–û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login #email,
//–¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä —Ç–∞ —Å–µ—Ç—Ç–µ—Ä login email
class Client {
  #login;
  #email;

  constructor(login, email) {
    this.#login = login;
    this.#email = email;
  }

  get getClientData() {
    return {
      login: this.#login,
      email: this.#email,
    };
  }

  set changeEmail(newEmail) {
    this.#email = newEmail;
  }
}
const client = new Client("mango", "mango@gmail.com");
client.changeEmail = '"mango@gmail.com"';
// console.log(client.getClientData.email);

//TODO:=============================================
//–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π —É–ø—Ä–∞–≤–ª—è—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É
//–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items.
//–ù–æ—Ç–∞—Ç–∫–∞ - —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —ñ priority.
//–î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ Priopity,
//—è–∫–∏–π –±—É–¥–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
//–î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text)
//updatePriority(text, newPriority)

class Notes {
  static Priority() {
    return {
      HIGHT: "hight",
      LOW: "low",
    };
  }

  constructor() {
    this.items = [];
  }

  addNote(note) {
    return this.items.push(note);
  }

  removeNote(noteName) {
    const index = this.items.findIndex((item) => item.text === noteName);
    if (index !== -1) {
      this.items.splice(index, 1);
    }
    // return this.items;
  }
  updatePriority({ text, newPriority }) {
    const index = this.items.findIndex((item) => item.text === text);
    if (index !== -1) {
      this.items[index].priority = newPriority;
    }
  }
}

const note1 = new Notes();

// note1.addNote({ text: "Note1", priority: Notes.Priority().LOW });
// note1.addNote({ text: "Note2", priority: Notes.Priority().LOW });
// note1.updatePriority({ text: "Note2", newPriority: Notes.Priority().HIGHT });
// console.table(note1.items);

//TODO:=============================================
// –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å Worker, —É —è–∫–æ–≥–æ —î –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ name, age, salary.
//–£ –∫–ª–∞—Å—É Worker —î –º–µ—Ç–æ–¥ getSalary.
//–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å TopLevelWorker, —É —è–∫–æ–≥–æ —î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å hierarchyLevel
//—ñ —è–∫–∏–π —É—Å–ø–∞–¥–∫–æ–≤—É—î –∫–ª–∞—Å Worker, –¥–æ–¥–∞—é—á–∏ –º–µ—Ç–æ–¥ getHierarchyLevel
//–†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ES5 –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤ —Ç–∞ ES6 –∫–ª–∞—Å—ñ–≤

const HIERARCHY_LEVEL = {
  TOP: "top",
  BOTTOM: "bottom",
};

const workerObj = {
  name: "Mango",
  surname: "Worker",
  age: 30,
  position: "FE developer",
  salary: 5000,
};

//ES5

const Worker = function (obj = {}) {
  const { name = "name", surname, age = 1, position, salary } = obj;
  this.name = name;
  this.surname = surname;
  this.age = age;
  this.position = position;
  this.salary = salary;
};

Worker.prototype.getSalary = function () {
  return this.salary;
};

const TopLevelWorker = function (obj, hierarchyLevel) {
  Worker.call(this, obj); //—É–Ω–∞—Å–ª–µ–¥—É–µ–º Worker
  this.hierarchyLevel = hierarchyLevel;
};

// TopLevelWorker.prototype = Object.create(Worker.prototype);
//TopLevelWorker.prototype.constructor = TopLevelWorker;
const top = new TopLevelWorker(workerObj, HIERARCHY_LEVEL.BOTTOM);
// console.log(top.__proto__ === TopLevelWorker.prototype);
// console.log(TopLevelWorker.prototype.__proto__ === Worker.prototype);
// console.log(TopLevelWorker.prototype.__proto__ === Object.prototype);
// console.log(TopLevelWorker.__proto__ === Function.prototype);
// console.log(Worker.__proto__ === Function.prototype);
// console.log(Worker.prototype.__proto__ === Object.prototype);
//console.log(top.__proto__.__proto__.__proto__ === Object.prototype);
// top.getSalary();
//ES6

class WorkerES6 {
  constructor(obj = {}) {
    const { name = "name", surname, age = 1, position, salary } = obj;
    this.name = name;
    this.surname = surname;
    this.age = age;
    this.position = position;
    this.salary = salary;
  }

  getSalary() {
    return this.salary;
  }
}

class TopLevelWorkerES6 extends WorkerES6 {
  constructor(obj, hierarchyLevel) {
    super(obj);
    this.hierarchyLevel = hierarchyLevel;
  }
}

const topES6 = new TopLevelWorkerES6(workerObj, HIERARCHY_LEVEL.TOP);
// console.log(TopLevelWorkerES6.prototype.__proto__ === ???);
// console.log(TopLevelWorkerES6.__proto__ === ???);
// console.log(topES6.__proto__ === ???);
// console.log(topES6.getSalary());

//TODO:======================
const phonebook = {
  contacts: [],
  add(data) {
    const newContact = {
      list: "default",
      ...data,
      id: this.generateId(),
      createdAt: this.getDate(),
    };
    this.contacts.push(newContact);
  },
  list() {
    console.table(this.contacts);
  },
  generateId() {
    return "_" + Math.random().toString(36).substr(2, 9);
  },
  getDate() {
    return Date.now();
  },
};

phonebook.add({
  name: "Mango",
  email: "mango@mail.com",
  list: "friends",
});
phonebook.list();

phonebook.add({
  name: "Poly",
  email: "poly@hotmail.com",
});
phonebook.list();

//TODO:======================
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, —è–∫–∏–π –º–∞—î —Ç–∞–∫—ñ –º–µ—Ç–æ–¥–∏:
// –º–µ—Ç–æ–¥ number, —è–∫–∏–π –Ω–∞–±—É–≤–∞—î –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
// –ì–µ—Ç—Ç–µ—Ä, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—Ö —ñ–∑ —á–∏—Å–ª–æ–º
// –º–µ—Ç–æ–¥–∏ add, substruct, divide, multiply
// –û–±'—î–∫—Ç –∫–ª–∞—Å—É –º–æ–∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ –ª–∞–Ω—Ü—é–∂–∫–∞
// +++++++++++++++++++++++++++++++++++++++++++++++++++

class Calculator {}

// const calculator = new Calculator();
// const res = calculator
// .number(10)
// .add(10)
// .divide(2)
// .multiply(4)
// .substruct(5)
// .result;

// console.log(res); // 35

// const res2 = calculator
// .number(20)
// .substruct(40)
// .multiply(-8)
// .divide(160)
// .add(20)
// .result;

// console.log(res2) // 21
